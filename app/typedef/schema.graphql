scalar MongoID

enum Role{
    CUSTOMER
    ADMIN
}
enum PaymentStatus{
    success
    rejected
    pending
}

type User{
    name:String!
    username:String!
    id:MongoID!
    email:String!
    carts:[Cart!]
    role:Role!
}

type Coin{
    id:MongoID!
    name:String!
    rate:Float!
    stock:Float!
    short:String!
    url:[String!]
}

type ListOfCoin{
    coin:Coin!
    quantity:Float!
}

type Cart{
    id:MongoID!
    coins:[ListOfCoin!]!
    paymentStatus:PaymentStatus
}

type Payment {
    MID:String!
    ORDER_ID:String!
    CUST_ID:MongoID!
    TXN_AMOUNT:String!
    CHANNEL_ID:String!
    WEBSITE:String!
    CHECKSUMHASH:String!
    EMAIL:String!
    INDUSTRY_TYPE_ID:String!
    CALLBACK_URL:String!

}

type AuthPlayload{
    token:String!
    user:User!
}

input CartID{
    id:MongoID!
}

type Query{
    me:User!
    coinList:[Coin!]!
    cart(input:CartID!):Cart
}

input LoginUser{
    username:String!
    password:String!
}

input RegisterUser{
    name:String!
    email:String!
    username:String!
    password:String!
    role:Role
}

input CreateCoin{
    name:String!
    rate:Float!
    stock:Float!
    short:String!
}

input DeleteCoin{
    short:String
    id:String
}

input CreateCart{
    id:MongoID!
    quantity:Float!
}

input UpdateCart{
    id:MongoID!
    updation:[CreateCart!]!
}

input AddCoinToCart{
    id:MongoID!
    addition:CreateCart!
}

input PaymentPayload{
    orderId:String!
    amount:String!
}

type Mutation{
    # User Mutations
    login(input:LoginUser!):AuthPlayload!
    register(input:RegisterUser!):AuthPlayload!

    # Coin Mutations
    createCoin(input:CreateCoin):Coin!
    deleteCoin(input:DeleteCoin!):Boolean!

    # Cart Mutation
    createCart(input:[CreateCart!]!):Cart!
    updateCart(input:UpdateCart):Cart!
    addCoinToCart(input:AddCoinToCart):Cart!

    # Payment Mution
    createPayment(input:PaymentPayload!):Payment!

}

type Subscription{
    CoinUpdated:[Coin!]!
}
